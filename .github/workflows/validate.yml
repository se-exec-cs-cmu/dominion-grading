name: Validate Student Submission

on:
  repository_dispatch:
    types: [validate-submission]

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
        contents: write
    
    steps:
    - name: Checkout grading repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: Checkout student code
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.client_payload.repository }}
        ref: ${{ github.event.client_payload.sha }}
        path: student-code
        token: ${{ secrets.WORKSHOP_BOT_TOKEN }}
    
    - name: Validate submission
      id: validate
      run: |
        echo "Starting validation..."
        
        # Ensure we capture output even if script fails
        if poetry run python scripts/validate_submission.py \
          --repo "${{ github.event.client_payload.repository }}" \
          --team "${{ github.event.client_payload.team }}" \
          --sha "${{ github.event.client_payload.sha }}" \
          --timestamp "${{ github.event.client_payload.timestamp }}" \
          --student-code ./student-code \
          > results.json 2>validation_errors.log; then

          echo "Validation completed successfully"
        else
          EXIT_CODE=$?
          echo "Validation script failed with exit code $EXIT_CODE"
          
          # Check if any output was produced
          if [ ! -s results.json ]; then
            echo "No output from validation script, creating error result"
            cat > results.json << EOF
        {
          "team": "${{ github.event.client_payload.team }}",
          "repository": "${{ github.event.client_payload.repository }}",
          "sha": "${{ github.event.client_payload.sha }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "totalPoints": 0,
          "passed": [],
          "failed": [],
          "error": "Validation script failed - check logs for details"
        }
        EOF
          fi
        fi
        
        # Always show what we got
        echo "=== Results file (first 500 chars) ==="
        head -c 500 results.json || echo "No results.json file"
        echo -e "\n=== Any errors ==="
        cat validation_errors.log 2>/dev/null || echo "No errors logged"

    - name: Debug - Show results.json contents
      if: always()
      run: |
        echo "=== Checking if results.json exists ==="
        if [ -f results.json ]; then
          echo "File exists"
          echo "File size: $(stat -c%s results.json 2>/dev/null || stat -f%z results.json) bytes"
          echo ""
          echo "=== File contents (with cat) ==="
          cat results.json || echo "Cat failed"
          echo ""
          echo "=== File contents (with hexdump - first 200 bytes) ==="
          hexdump -C results.json | head -10 || echo "Hexdump failed"
          echo ""
          echo "=== Checking if file is valid JSON ==="
          python3 -m json.tool results.json || echo "Not valid JSON"
        else
          echo "results.json does NOT exist!"
        fi
        
        echo ""
        echo "=== All files in current directory ==="
        ls -la
        
        echo ""
        echo "=== Checking validation error log ==="
        if [ -f validation_errors.log ]; then
          echo "Error log contents:"
          cat validation_errors.log
        fi
        
    - name: Format comment from results
      id: format-comment
      run: |
        poetry run python scripts/format_comment.py \
          --results results.json \
          --template templates/comment_template.md \
          > comment.md

        # Save comment to environment
        echo 'COMMENT_BODY<<EOF' >> $GITHUB_ENV
        cat comment.md >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Post results to student repository
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.WORKSHOP_BOT_TOKEN }}
        script: |
          // Find or create the submission results issue
          const owner = '${{ github.event.client_payload.repository }}'.split('/')[0];
          const repo = '${{ github.event.client_payload.repository }}'.split('/')[1];
          
          // Search for existing issue
          const issues = await github.rest.issues.listForRepo({
            owner: owner,
            repo: repo,
            state: 'open',
            labels: 'submission-results'
          });
          
          let issueNumber;
          
          if (issues.data.length === 0) {
            // Create new issue
            const newIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: 'Submission Results',
              body: 'This issue tracks your submission validation results. Each time you push a claim.json file, results will appear here as a comment.',
              labels: ['submission-results']
            });
            issueNumber = newIssue.data.number;
          } else {
            issueNumber = issues.data[0].number;
          }
          
          // Post comment with results
          await github.rest.issues.createComment({
            owner: owner,
            repo: repo,
            issue_number: issueNumber,
            body: process.env.COMMENT_BODY
          });
          
          console.log(`Posted results to ${owner}/${repo}#${issueNumber}`);

    - name: Update dashboard
      if: always()
      run: |
        poetry run python scripts/update_dashboard.py \
          --results results.json \
          --output docs/data.json
        
    - name: Commit dashboard updates
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/data.json
        git commit -m "Update dashboard for team ${{ github.event.client_payload.team }}" || exit 0
        git push